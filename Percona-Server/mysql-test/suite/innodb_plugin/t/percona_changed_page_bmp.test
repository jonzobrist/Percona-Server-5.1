# Tests for the changed page tracking bitmap.
--source include/not_embedded.inc
--source include/not_crashrep.inc
--source include/have_debug.inc
--source include/have_innodb_plugin.inc
# Valgrind reports useless errors on very fast server shutdowns
--source include/not_valgrind.inc

let $MYSQLD_DATADIR= `select @@datadir`;
let $BITMAP_FILE= $MYSQLD_DATADIR/ib_modified_log.1;

--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

# Create some log data, less than log capacity
CREATE TABLE t1 (x INT) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);

# Check that the bitmap file has been created
file_exists $BITMAP_FILE;

# Test that an empty existing bitmap file is handled properly when it's
# possible to re-read the entire missing range.

--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server 10
--source include/wait_until_disconnected.inc
remove_file $BITMAP_FILE;
write_file $BITMAP_FILE;
EOF
--enable_reconnect
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/wait_until_connected_again.inc

# TODO: check the tracked LSN range continuity once this info is exposed through
# INFORMATION_SCHEMA.

# Create more log data, larger amount than the log group capacity. At the same time test second space id.
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
CREATE TABLE t2 (x INT) ENGINE=InnoDB;
INSERT INTO t2 VALUES (1),(2),(3),(4),(5);

file_exists $BITMAP_FILE;

# Restart the server to check that the bitmap file is properly read on the startup
# to resume tracking.

# TODO: check the tracked LSN range continuity once this info is exposed through
# INFORMATION_SCHEMA.
--source include/restart_mysqld.inc

file_exists $BITMAP_FILE;

INSERT INTO t1 SELECT x FROM t1;

# Restart the server again with the very fast shutdown
SET GLOBAL INNODB_FAST_SHUTDOWN=2;

--source include/restart_mysqld.inc

# TODO: check the tracked LSN range continuity once this info is exposed through
# INFORMATION_SCHEMA.

file_exists $BITMAP_FILE;

# Test that an empty existing bitmap file is handled properly when it's impossible to re-read the full missing range.

--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server 10
--source include/wait_until_disconnected.inc
remove_file $BITMAP_FILE;
write_file $BITMAP_FILE;
EOF
--enable_reconnect
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/wait_until_connected_again.inc

file_exists $BITMAP_FILE;
# Create at least one more bitmap page on shutdown
INSERT INTO t1 VALUES (1),(2),(3),(4),(5);

# Test that the bitmap file is read in block size multiples with junk at the end discarded
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--shutdown_server 10
--source include/wait_until_disconnected.inc
append_file $BITMAP_FILE;
junk junk junk junk
EOF
--enable_reconnect
--exec echo "restart:-#d,crash_before_bitmap_write" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--source include/wait_until_connected_again.inc
call mtr.add_suppression("InnoDB: Warning: truncated block detected.*");

file_exists $BITMAP_FILE;

# TODO: check the tracked LSN range continuity once this info is exposed through
# INFORMATION_SCHEMA.

# Test crashing before writing of new bitmap data

--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--error 2013
INSERT INTO t1 SELECT x FROM t1;
--enable_reconnect
--source include/wait_until_connected_again.inc

file_exists $BITMAP_FILE;

# TODO: check the tracked LSN range continuity once this info is exposed through
# INFORMATION_SCHEMA.

DROP TABLE t1, t2;
