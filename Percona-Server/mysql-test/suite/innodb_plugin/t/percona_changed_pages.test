###########################################
# Test for I_S.INNODB_CHANGED_PAGES table #
###########################################

--source include/have_innodb_plugin.inc

SELECT @@innodb_track_changed_pages;

SET @OLD_INNODB_CHANGED_PAGES_LIMIT = @@GLOBAL.INNODB_CHANGED_PAGES_LIMIT;

SET GLOBAL INNODB_CHANGED_PAGES_LIMIT = 0;

CREATE TABLE T1 (F1 CHAR(255)) ENGINE=INNODB;
SET @t1_space_id =
	(SELECT SPACE
		FROM INFORMATION_SCHEMA.INNODB_SYS_TABLES
		WHERE
		INFORMATION_SCHEMA.INNODB_SYS_TABLES.SCHEMA='test' AND
		INFORMATION_SCHEMA.INNODB_SYS_TABLES.NAME='T1');

--disable_query_log
--disable_result_log

#########################################################################
# The maximum log size is 1MB. Each row occupies at least 256 bytes.    #
# Each iteration inserts 100 rows. They occupies at least 25KB. To be   #
# sure that tracking log thread wrote at least 1M/16K pages we need to  #
# exceed maximum log size twice. That means we should do at least       #
# 2M/25K = 80 iterations.                                               #
#########################################################################
--let $i=80

while ($i)
{
--dec $i
INSERT INTO T1 (F1) VALUES
("1"), ("2"), ("3"), ("4"), ("5"), ("6"), ("7"), ("8"), ("9"), ("10"),
("11"), ("12"), ("13"), ("14"), ("15"), ("16"), ("17"), ("18"), ("19"), ("20"),
("21"), ("22"), ("23"), ("24"), ("25"), ("26"), ("27"), ("28"), ("29"), ("30"),
("31"), ("32"), ("33"), ("34"), ("35"), ("36"), ("37"), ("38"), ("39"), ("40"), 
("41"), ("42"), ("43"), ("44"), ("45"), ("46"), ("47"), ("48"), ("49"), ("50"),
("51"), ("52"), ("53"), ("54"), ("55"), ("56"), ("57"), ("58"), ("59"), ("60"),
("61"), ("62"), ("63"), ("64"), ("65"), ("66"), ("67"), ("68"), ("69"), ("70"),
("71"), ("72"), ("73"), ("74"), ("75"), ("76"), ("77"), ("78"), ("79"), ("80"),
("81"), ("82"), ("83"), ("84"), ("85"), ("86"), ("87"), ("88"), ("89"), ("90"),
("91"), ("92"), ("93"), ("94"), ("95"), ("96"), ("97"), ("98"), ("99"), ("100");
}

###################################################################
# Gather data for condition pushdown testing not using conditions #
###################################################################
SET @cond_test_lsn=
	(SELECT MIN(end_lsn)
		FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES);

SET @cond_test_pages_count=
	(SELECT count(*)
		FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
		GROUP BY end_lsn
		ORDER BY end_lsn
		LIMIT 1);

--enable_query_log
--enable_result_log

###############################################################
# Check if the number of changed pages is greater than 1M/16K #
###############################################################
SET GLOBAL INNODB_CHANGED_PAGES_LIMIT = 0;
SELECT COUNT(DISTINCT PAGE_ID) >= (1024000/16384)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID = @t1_space_id;
############################################################# 
# Check if the maximum page id is less than resonable limit #
#############################################################
SELECT MAX(PAGE_ID) < (3*1024000/16384)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE SPACE_ID = @t1_space_id;
########################################################
# The records where START_LSN >= END_LSN should absent #
########################################################
SELECT COUNT(*)
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE START_LSN >= END_LSN;

######################################################
# Check condition if pushdown doesn't break anything #
######################################################
SELECT COUNT(*) = @cond_test_pages_count
  FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES
  WHERE
  END_LSN > (@cond_test_lsn - 1) AND
  END_LSN < (@cond_test_lsn + 1);

################################################
# Check how limit for maximum rows count works #
################################################
SET GLOBAL INNODB_CHANGED_PAGES_LIMIT = 1;
SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_CHANGED_PAGES;

SET GLOBAL INNODB_CHANGED_PAGES_LIMIT = @OLD_INNODB_CHANGED_PAGES_LIMIT;

DROP TABLE T1;
